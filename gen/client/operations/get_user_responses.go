// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vpngen/keydesk/gen/models"
)

// GetUserReader is a Reader for the GetUser structure.
type GetUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetUserOK creates a GetUserOK with default headers values
func NewGetUserOK() *GetUserOK {
	return &GetUserOK{}
}

/*
GetUserOK describes a response with status code 200, with default header values.

A list of users.
*/
type GetUserOK struct {
	Payload []*models.User
}

// IsSuccess returns true when this get user o k response has a 2xx status code
func (o *GetUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user o k response has a 3xx status code
func (o *GetUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user o k response has a 4xx status code
func (o *GetUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user o k response has a 5xx status code
func (o *GetUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user o k response a status code equal to that given
func (o *GetUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user o k response
func (o *GetUserOK) Code() int {
	return 200
}

func (o *GetUserOK) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) String() string {
	return fmt.Sprintf("[GET /user][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) GetPayload() []*models.User {
	return o.Payload
}

func (o *GetUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserForbidden creates a GetUserForbidden with default headers values
func NewGetUserForbidden() *GetUserForbidden {
	return &GetUserForbidden{}
}

/*
GetUserForbidden describes a response with status code 403, with default header values.

You do not have necessary permissions for the resource
*/
type GetUserForbidden struct {
}

// IsSuccess returns true when this get user forbidden response has a 2xx status code
func (o *GetUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user forbidden response has a 3xx status code
func (o *GetUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user forbidden response has a 4xx status code
func (o *GetUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user forbidden response has a 5xx status code
func (o *GetUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user forbidden response a status code equal to that given
func (o *GetUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user forbidden response
func (o *GetUserForbidden) Code() int {
	return 403
}

func (o *GetUserForbidden) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserForbidden ", 403)
}

func (o *GetUserForbidden) String() string {
	return fmt.Sprintf("[GET /user][%d] getUserForbidden ", 403)
}

func (o *GetUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserInternalServerError creates a GetUserInternalServerError with default headers values
func NewGetUserInternalServerError() *GetUserInternalServerError {
	return &GetUserInternalServerError{}
}

/*
GetUserInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetUserInternalServerError struct {
}

// IsSuccess returns true when this get user internal server error response has a 2xx status code
func (o *GetUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user internal server error response has a 3xx status code
func (o *GetUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user internal server error response has a 4xx status code
func (o *GetUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user internal server error response has a 5xx status code
func (o *GetUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get user internal server error response a status code equal to that given
func (o *GetUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get user internal server error response
func (o *GetUserInternalServerError) Code() int {
	return 500
}

func (o *GetUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserInternalServerError ", 500)
}

func (o *GetUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /user][%d] getUserInternalServerError ", 500)
}

func (o *GetUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserServiceUnavailable creates a GetUserServiceUnavailable with default headers values
func NewGetUserServiceUnavailable() *GetUserServiceUnavailable {
	return &GetUserServiceUnavailable{}
}

/*
GetUserServiceUnavailable describes a response with status code 503, with default header values.

Maintenance
*/
type GetUserServiceUnavailable struct {
	Payload *models.MaintenanceError
}

// IsSuccess returns true when this get user service unavailable response has a 2xx status code
func (o *GetUserServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user service unavailable response has a 3xx status code
func (o *GetUserServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user service unavailable response has a 4xx status code
func (o *GetUserServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user service unavailable response has a 5xx status code
func (o *GetUserServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get user service unavailable response a status code equal to that given
func (o *GetUserServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get user service unavailable response
func (o *GetUserServiceUnavailable) Code() int {
	return 503
}

func (o *GetUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUserServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /user][%d] getUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUserServiceUnavailable) GetPayload() *models.MaintenanceError {
	return o.Payload
}

func (o *GetUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MaintenanceError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDefault creates a GetUserDefault with default headers values
func NewGetUserDefault(code int) *GetUserDefault {
	return &GetUserDefault{
		_statusCode: code,
	}
}

/*
GetUserDefault describes a response with status code -1, with default header values.

error
*/
type GetUserDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get user default response has a 2xx status code
func (o *GetUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get user default response has a 3xx status code
func (o *GetUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get user default response has a 4xx status code
func (o *GetUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get user default response has a 5xx status code
func (o *GetUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get user default response a status code equal to that given
func (o *GetUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get user default response
func (o *GetUserDefault) Code() int {
	return o._statusCode
}

func (o *GetUserDefault) Error() string {
	return fmt.Sprintf("[GET /user][%d] GetUser default  %+v", o._statusCode, o.Payload)
}

func (o *GetUserDefault) String() string {
	return fmt.Sprintf("[GET /user][%d] GetUser default  %+v", o._statusCode, o.Payload)
}

func (o *GetUserDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
