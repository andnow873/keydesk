// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Newuser newuser
//
// swagger:model newuser
type Newuser struct {

	// user name
	// Required: true
	UserName *string `json:"UserName"`

	// wireguard config
	// Required: true
	WireguardConfig *NewuserWireguardConfig `json:"WireguardConfig"`
}

// Validate validates this newuser
func (m *Newuser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWireguardConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Newuser) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("UserName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

func (m *Newuser) validateWireguardConfig(formats strfmt.Registry) error {

	if err := validate.Required("WireguardConfig", "body", m.WireguardConfig); err != nil {
		return err
	}

	if m.WireguardConfig != nil {
		if err := m.WireguardConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WireguardConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WireguardConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this newuser based on the context it is used
func (m *Newuser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWireguardConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Newuser) contextValidateWireguardConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.WireguardConfig != nil {
		if err := m.WireguardConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WireguardConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WireguardConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Newuser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Newuser) UnmarshalBinary(b []byte) error {
	var res Newuser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewuserWireguardConfig newuser wireguard config
//
// swagger:model NewuserWireguardConfig
type NewuserWireguardConfig struct {

	// file content
	// Required: true
	FileContent *string `json:"FileContent"`

	// file name
	// Required: true
	FileName *string `json:"FileName"`

	// tonnel name
	// Required: true
	TonnelName *string `json:"TonnelName"`
}

// Validate validates this newuser wireguard config
func (m *NewuserWireguardConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTonnelName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewuserWireguardConfig) validateFileContent(formats strfmt.Registry) error {

	if err := validate.Required("WireguardConfig"+"."+"FileContent", "body", m.FileContent); err != nil {
		return err
	}

	return nil
}

func (m *NewuserWireguardConfig) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("WireguardConfig"+"."+"FileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *NewuserWireguardConfig) validateTonnelName(formats strfmt.Registry) error {

	if err := validate.Required("WireguardConfig"+"."+"TonnelName", "body", m.TonnelName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this newuser wireguard config based on context it is used
func (m *NewuserWireguardConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewuserWireguardConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewuserWireguardConfig) UnmarshalBinary(b []byte) error {
	var res NewuserWireguardConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
