// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PushRequest push request
//
// swagger:model PushRequest
type PushRequest struct {

	// notification
	// Required: true
	Notification *NotificationOptions `json:"notification"`

	// options
	// Required: true
	Options *PushOptions `json:"options"`

	// subscription
	// Required: true
	Subscription *Subscription `json:"subscription"`
}

// Validate validates this push request
func (m *PushRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PushRequest) validateNotification(formats strfmt.Registry) error {

	if err := validate.Required("notification", "body", m.Notification); err != nil {
		return err
	}

	if m.Notification != nil {
		if err := m.Notification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification")
			}
			return err
		}
	}

	return nil
}

func (m *PushRequest) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *PushRequest) validateSubscription(formats strfmt.Registry) error {

	if err := validate.Required("subscription", "body", m.Subscription); err != nil {
		return err
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this push request based on the context it is used
func (m *PushRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNotification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PushRequest) contextValidateNotification(ctx context.Context, formats strfmt.Registry) error {

	if m.Notification != nil {

		if err := m.Notification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification")
			}
			return err
		}
	}

	return nil
}

func (m *PushRequest) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *PushRequest) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscription != nil {

		if err := m.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PushRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PushRequest) UnmarshalBinary(b []byte) error {
	var res PushRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
