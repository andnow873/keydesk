// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stats stats
//
// swagger:model stats
type Stats struct {

	// active users
	// Required: true
	ActiveUsers []*StatsActiveUsersItems0 `json:"ActiveUsers"`

	// total traffic g b
	// Required: true
	TotalTrafficGB []*StatsTotalTrafficGBItems0 `json:"TotalTrafficGB"`

	// total users
	// Required: true
	TotalUsers []*StatsTotalUsersItems0 `json:"TotalUsers"`
}

// Validate validates this stats
func (m *Stats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTrafficGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stats) validateActiveUsers(formats strfmt.Registry) error {

	if err := validate.Required("ActiveUsers", "body", m.ActiveUsers); err != nil {
		return err
	}

	for i := 0; i < len(m.ActiveUsers); i++ {
		if swag.IsZero(m.ActiveUsers[i]) { // not required
			continue
		}

		if m.ActiveUsers[i] != nil {
			if err := m.ActiveUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActiveUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ActiveUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateTotalTrafficGB(formats strfmt.Registry) error {

	if err := validate.Required("TotalTrafficGB", "body", m.TotalTrafficGB); err != nil {
		return err
	}

	for i := 0; i < len(m.TotalTrafficGB); i++ {
		if swag.IsZero(m.TotalTrafficGB[i]) { // not required
			continue
		}

		if m.TotalTrafficGB[i] != nil {
			if err := m.TotalTrafficGB[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TotalTrafficGB" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TotalTrafficGB" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateTotalUsers(formats strfmt.Registry) error {

	if err := validate.Required("TotalUsers", "body", m.TotalUsers); err != nil {
		return err
	}

	for i := 0; i < len(m.TotalUsers); i++ {
		if swag.IsZero(m.TotalUsers[i]) { // not required
			continue
		}

		if m.TotalUsers[i] != nil {
			if err := m.TotalUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TotalUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TotalUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stats based on the context it is used
func (m *Stats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalTrafficGB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stats) contextValidateActiveUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveUsers); i++ {

		if m.ActiveUsers[i] != nil {
			if err := m.ActiveUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActiveUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ActiveUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) contextValidateTotalTrafficGB(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TotalTrafficGB); i++ {

		if m.TotalTrafficGB[i] != nil {
			if err := m.TotalTrafficGB[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TotalTrafficGB" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TotalTrafficGB" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) contextValidateTotalUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TotalUsers); i++ {

		if m.TotalUsers[i] != nil {
			if err := m.TotalUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TotalUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TotalUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stats) UnmarshalBinary(b []byte) error {
	var res Stats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StatsActiveUsersItems0 stats active users items0
//
// swagger:model StatsActiveUsersItems0
type StatsActiveUsersItems0 struct {

	// month
	Month int64 `json:"Month,omitempty"`

	// value
	Value int64 `json:"Value,omitempty"`
}

// Validate validates this stats active users items0
func (m *StatsActiveUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stats active users items0 based on context it is used
func (m *StatsActiveUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatsActiveUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatsActiveUsersItems0) UnmarshalBinary(b []byte) error {
	var res StatsActiveUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StatsTotalTrafficGBItems0 stats total traffic g b items0
//
// swagger:model StatsTotalTrafficGBItems0
type StatsTotalTrafficGBItems0 struct {

	// month
	Month int64 `json:"Month,omitempty"`

	// value
	Value float32 `json:"Value,omitempty"`
}

// Validate validates this stats total traffic g b items0
func (m *StatsTotalTrafficGBItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stats total traffic g b items0 based on context it is used
func (m *StatsTotalTrafficGBItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatsTotalTrafficGBItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatsTotalTrafficGBItems0) UnmarshalBinary(b []byte) error {
	var res StatsTotalTrafficGBItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StatsTotalUsersItems0 stats total users items0
//
// swagger:model StatsTotalUsersItems0
type StatsTotalUsersItems0 struct {

	// month
	Month int64 `json:"Month,omitempty"`

	// value
	Value int64 `json:"Value,omitempty"`
}

// Validate validates this stats total users items0
func (m *StatsTotalUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stats total users items0 based on context it is used
func (m *StatsTotalUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatsTotalUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatsTotalUsersItems0) UnmarshalBinary(b []byte) error {
	var res StatsTotalUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
