// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationOptions notification options
//
// swagger:model NotificationOptions
type NotificationOptions struct {

	// options
	Options *NotificationOptionsOptions `json:"options,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this notification options
func (m *NotificationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationOptions) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *NotificationOptions) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this notification options based on the context it is used
func (m *NotificationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationOptions) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationOptions) UnmarshalBinary(b []byte) error {
	var res NotificationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NotificationOptionsOptions notification options options
//
// swagger:model NotificationOptionsOptions
type NotificationOptionsOptions struct {

	// actions
	Actions []*NotificationOptionsOptionsActionsItems0 `json:"actions"`

	// badge
	Badge string `json:"badge,omitempty"`

	// body
	// Required: true
	Body *string `json:"body"`

	// data
	Data AnyValue `json:"data,omitempty"`

	// dir
	Dir string `json:"dir,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// lang
	Lang string `json:"lang,omitempty"`

	// renotify
	Renotify bool `json:"renotify,omitempty"`

	// require interaction
	RequireInteraction bool `json:"requireInteraction,omitempty"`

	// silent
	Silent bool `json:"silent,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// vibrate
	Vibrate []int64 `json:"vibrate"`
}

// Validate validates this notification options options
func (m *NotificationOptionsOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationOptionsOptions) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + "actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + "actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NotificationOptionsOptions) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("options"+"."+"body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this notification options options based on the context it is used
func (m *NotificationOptionsOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationOptionsOptions) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Actions); i++ {

		if m.Actions[i] != nil {

			if swag.IsZero(m.Actions[i]) { // not required
				return nil
			}

			if err := m.Actions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + "actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + "actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationOptionsOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationOptionsOptions) UnmarshalBinary(b []byte) error {
	var res NotificationOptionsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NotificationOptionsOptionsActionsItems0 notification options options actions items0
//
// swagger:model NotificationOptionsOptionsActionsItems0
type NotificationOptionsOptionsActionsItems0 struct {

	// action
	Action string `json:"action,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this notification options options actions items0
func (m *NotificationOptionsOptionsActionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this notification options options actions items0 based on context it is used
func (m *NotificationOptionsOptionsActionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationOptionsOptionsActionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationOptionsOptionsActionsItems0) UnmarshalBinary(b []byte) error {
	var res NotificationOptionsOptionsActionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
