// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
//
// swagger:model Subscription
type Subscription struct {

	// endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// keys
	// Required: true
	Keys *SubscriptionKeys `json:"keys"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateKeys(formats strfmt.Registry) error {

	if err := validate.Required("keys", "body", m.Keys); err != nil {
		return err
	}

	if m.Keys != nil {
		if err := m.Keys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keys")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subscription based on the context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	if m.Keys != nil {

		if err := m.Keys.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keys")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SubscriptionKeys subscription keys
//
// swagger:model SubscriptionKeys
type SubscriptionKeys struct {

	// auth
	Auth string `json:"auth,omitempty"`

	// p256dh
	P256dh string `json:"p256dh,omitempty"`
}

// Validate validates this subscription keys
func (m *SubscriptionKeys) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription keys based on context it is used
func (m *SubscriptionKeys) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionKeys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionKeys) UnmarshalBinary(b []byte) error {
	var res SubscriptionKeys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
