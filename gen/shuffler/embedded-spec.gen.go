// Package shuffler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package shuffler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW30/jOBD+V6y5e4zaAveUN64cqKcTVCqCB4SQcSataWKHsQ3XrfK/r+wkTdOmBaRd",
	"afct9Yxnvu+bH+4ahM4LrVBZA/EajFhgzsPnea7wm+Q3d+OxVqmc+7OCdIFkJQaPVGb4JLSyqKz/bVcF",
	"QgzGklRzKKPKQfEce63WKYXZIXsZAeGrk4QJxA8d5+3AURfFYxlBBfc2hFtDgkaQLKzUCmK4m16zkCgC",
	"VC73kbWzmVT+RL8JiOB9DhHIwqCAx2gf9T9Emnr5TKYzFP+d3k4P6VVwY941Jb23C7PsPTdIb9if0Bmk",
	"z6m38YxaEJvQVe6Wq35+QWF9gptKmkN8uBBozNMSVx8j2PL1NZpl2pqJSnVPVxHik/H2rahSWZwjhbbR",
	"lmeHHXbybkXrXu3jeze9brlqhTcpxA9r+JMwhRj+GLazMqwHZdiVqIyOe+/N1EcX7iXhleOUfNJ/twdL",
	"L/ZukN9jkEPvC0fSrmaeXQX13/vbc2cX/vMZOSFdasq5hdhbfE8HV4hrK2yqvLC2gNJHlXXbdTfDbOHS",
	"NENiORrD58jOpxN/W9oMD5vfkEx1/2QwGoy8GrpAxQsJMZwNRoOzMHJ2EcAPRShAtQy0sfsoLjDlLrOs",
	"cgyriknD6h01YI090TmXypvqL52yJa4SNMsBBAzEfchJAjFMtbHjOnNVDDT2b52Esd0qOy+KTIpwb/hi",
	"PJ7mQfBf+D/Pi6zaqSEnxM3ZQOi8VbpZqH6pddqsubZHuqKQavK8FQp/HjGZMp1LazFhyce0oWdX2/oN",
	"ODYxW6/FXqv6w/090XWz5DAcmEIrUxE9HZ18SdquTGIzpcdwt7vKz2dnZ3bVvXb5M5JXynsx/wIGT8ZT",
	"i8QEYYDV6re1a2V4q9JmxJyTyU/QuQ0aNeQ7lPpLsMMS3wO16n7EnJKvDtnkwjcLoXWkMPFY/zo57dFI",
	"74gDIUFoui9V8pgC1T+HHuxYGyIwLs85rSCGsS8LMtWhFXyaJTLc1HuOAVl36K+wmflZ/frttOjohxFr",
	"H/Mecpe/lq5XaPdKXZbl9wAAAP//i47Z0AgLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
