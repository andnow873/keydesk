// Package shuffler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package shuffler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX2/jNgz/KgK3RyNJe/fkt67dFRmGNkC63kNRFKpMJ7rako+S2mWBv/sgyYnt2Okf",
	"bANubwlJ8c+P5I/egtBlpRUqayDdghFrLHn4eVYq/Evy69vzc61yufKyinSFZCUGi1wW+CC0sqis/283",
	"FUIKxpJUK6iTaKB4iaNa65TC4pi+ToDwu5OEGaR3PeOu46SfxX2dQEz3JrjbQoZGkKys1ApSuF1csRAo",
	"AVSu9J61s4VUXqKfBSTwsoIEZGVQwH0yzPpXIk2j9cwXSxS/n94sjuFVcWNeNGWjryvzNCo3SM84HtAZ",
	"pPeht7dM2iT2rmPstlb9+A2F9QGuIzTH6uFCoDEPT7h5O4OOre/RstDWzFWuR6aKEB+M13e8SmVxhRTG",
	"RlteHDc4iNvx1n86Vu/t4qqtVSu8ziG928LPhDmk8NO03ZVpsyjTPkR18rr1YKfeevBVEl46Ttk77Q9n",
	"sPZgHzr5fyxymH3hSNrN0lcXU/3t682Zs2v/8xE5IX3RVHILqdf4mQ6mkDZa2Hd5bW0Ftfcqm7HrM8Ny",
	"7fK8QGIlGsNXyM4Wc/9a2gKPq5+RTHx/MplNZh4NXaHilYQUPk1mk09h5ew6JD8VoQGRDLSxwywuMOeu",
	"sCwaBqpi0rCGoyZsp890yaXyquaXztkTbjI0TxMIORD3LucZpLDQxp43kWMz0NhfdBbWttN2XlWFFOHd",
	"9Jvx+ewOgv+Ff/KyKiKnhpiQ7mQTocsW6R2helLrjdnu2aDoWEKuydetUHh5wmTOdCmtxYxlb5cNI1xt",
	"mxvw2sZ0rsVgVL1wyBN9M0sOg8BUWplY6Ons5EPQ9mES+y19Le+Wq/x+9jizj+6VKx+RPFLeivkLGCwZ",
	"zy0SE4QhrRa/DtfKcKvy3Yo5J7P/AOfWabIrvlfSeAsOqsSXUFp8nzCn5HeHbH7hh4XQOlKY+Vw/n5yO",
	"YKQPwIEQIAzdhzr5GgLxy2Ekd2wULeGFs7OnursGFZOGZiHc1/cJGFeWnDaQwnmQMtWDIPjbEc50Pxsr",
	"DFX0CeISd/ywbC7lwTjP/jUQ2sM/AsSXH7gHB5hfoh2MTBfwrczqOGcFWhxCfhHkDerzLFwJ4iVaJBMi",
	"B371lwMSiJc17kmfeZJO3W+sqc//H7X1I59px7/C3rPMSxe+FnNXFBsWEYy7O/s83N0/DBJT2rJcO5X9",
	"oIvbjMHBEMUh6C9tXf8dAAD//yd2LmaUDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
