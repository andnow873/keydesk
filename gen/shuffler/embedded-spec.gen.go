// Package shuffler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package shuffler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/jNhD9K8S0R8F2snvSLU26gYsiMeA0e1gEAUONbG4kUhmSSV1D/70gKVuSJecD",
	"bdH2JnGGw3lvZh65BaHLSitU1kC6BSPWWPLweVYq/EPy69vzc61yufJrFekKyUoMHrks8F5oZVFZ/283",
	"FUIKxpJUK6iT6KB4iaNW65TC4pi9ToDwyUnCDNJvPedu4KSfxV2dQEz3JoTbQoZGkKys1ApSuF1csXBQ",
	"Aqhc6SNrZwup/Ip+FpDAywoSkJVBAXfJMOufiTSN4pkvlih+Pb1ZHOOr4sa8aMpGd1fmcXTdID3j+IHO",
	"IL2Pvb1n0iaxDx3PbrHqh+8orD/gOlJzDA8XAo25f8TN2xl0fH2NloW2Zq5yPdJVhHhvvL0TVSqLK6TQ",
	"Ntry4rjDwbmdaP2tY3hvF1ctVq3wOof02xZ+JMwhhR+m7axMm0GZ9imqk9e9BzP11oavkvDSccre6X/Y",
	"g7Un+zDI/2OQQ+8LR9Julh5dTPWXrzdnzq795wNyQvqiqeQWUm/xPR1cIW2ssK/y2toKah9VNm3XV4bl",
	"2uV5gcRKNIavkJ0t5n63tAUeNz8jmbj/ZDKbzDwbukLFKwkpfJrMJp/CyNl1SH4qQgGiGGhjh1lcYM5d",
	"YVl0DFLFpGGNRk3Yzp7pkkvlTc2XztkjbjI0jxMIORD3IecZpLDQxp43J8dioLE/6SyMbafsvKoKKcK+",
	"6Xfj89ldCP4Lf+dlVURNDWdCulubCF22TO8E1Ytar8122wagI4Rck8etUPj1hMmc6VJaixnL3oYNI1pt",
	"mzvgtYnp3BaDVvWLQ53ou1lyGBZMpZWJQE9nJx+itk+T2E/pa3m3WuXns6eZfXavXPmA5JnyXszfgMGT",
	"8dwiMUEY0mr562itDHdVvhsx52T2D/DcBk124HuQxktwgBJfArS4P2FOySeHbH7hm4XQOlKY+Vw/n5yO",
	"cKQPyIFwQGi6D1XyNQbiy2Ekd2wMCRhXlpw2kMK5Lwsy1YMVfHYiMt3Xe4Uhs/7QX+Ju5pfN7XfQorO/",
	"DVh7mY+A+/Lf4vUS7aDUXVK3MqtjfxRocUjrRVhvmJ1nQd2Jl2iRTHgsBF30ig8JxBsx9ndfMZIOtjfG",
	"q777i6X7yPPq+OvpPUO4dOGVl7ui2LDIYJy52efhzP1mkJjSluXaqexfb4xY2P6w1fWfAQAA//+uKNLM",
	"IA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
