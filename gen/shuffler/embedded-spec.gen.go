// Package shuffler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package shuffler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWXU/zNhT+K9bZLqO2wK5yx8pAnSaoVAQXCCHjnLSmiR2ObVip8t8nO0nTtGkBaa/0",
	"vnepz+fznK+uQei80AqVNRCvwYgF5jx8nucKPyS/uRuPtUrl3L8VpAskKzFopDLDJ6GVRWX9b7sqEGIw",
	"lqSaQxlVCorn2Cu1TinMDsnLCAhfnSRMIH7oKG87jrpZPJYRVOneBndrSNAIkoWVWkEMd9NrFgJFgMrl",
	"3rN2NpPKv/Bcfeg3ARG8S8K545RABLIwKOAx2gfwF5GmXmiT6QzFP6e300PUFdyYd01Jr3Vhlr3vBukN",
	"+wM6g/Q1IjeaUZvExnUVu8Wqn19QWB/gpmLpEB4uBBrztMTV5xls6fpyzTJtzUSluqfBCPHJePmWV6ks",
	"zpFCB2nLs8MKO3G3vHVN+/DeTa9brFrhTQrxwxp+J0whht+G7dgM65kZdikqo+Pae+P1mcG9JLzyPflF",
	"/d0eLD3Zu05+jZkOvS8cSbuaeXRVqn/f3547u/Cfz8gJ6VJTzi3EXuJ7OqhCXEthU+WFtQWU3qus2667",
	"JGYLl6YZEsvRGD5Hdj6deGtpMzwsfkMylf3JYDQYeTZ0gYoXEmI4G4wGZ2Hk7CIkPxShANUy0MbuZ3GB",
	"KXeZZZVi2FpMGlavqwFr5InOuVReVH/plC1xlaBZDiDkQNy7nCQQw1QbO64jV8VAY//USRjbrbLzosik",
	"CHbDF+PzaW6D/8J/eV5k1XoNMSFu3gZC5y3TzW71S63TZo3ZHugKQqrJ41Yo/HvEZMp0Lq3FhCWfw4ae",
	"XW3rc3BsYrYOx16r+sf9PdFVs+QwPJhCK1MBPR2dfIvaLk1iM6XH8m53lZ/Pzs7ssnvt8mckz5TXYv4Y",
	"Bk3GU4vEBGFIq+Vva9fKcKvSZsSck8kP4Ll1GjXgO5D6S7CDEt8DtMo+Yk7JV4dscuGbhdA6Upj4XP84",
	"Oe3hSO+QAyFAaLpvVfIYA9U/h57csRZEYFyec1pBDGNfFmSqAyvoNEtkuKn3HENm3aG/wmbmZ/X122nR",
	"0f8GrD3mPeAufy5er9Dulbosy/8CAAD//3TfddUTCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
