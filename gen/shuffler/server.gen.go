// Package shuffler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package shuffler

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new VPN config
	// (POST /configs)
	PostConfigs(ctx echo.Context) error
	// Get free VPN slots
	// (GET /configs/slots)
	GetConfigsSlots(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfigs(ctx)
	return err
}

// GetConfigsSlots converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigsSlots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigsSlots(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/configs", wrapper.PostConfigs)
	router.GET(baseURL+"/configs/slots", wrapper.GetConfigsSlots)

}

type PostConfigsRequestObject struct {
	Body *PostConfigsJSONRequestBody
}

type PostConfigsResponseObject interface {
	VisitPostConfigsResponse(w http.ResponseWriter) error
}

type PostConfigs201JSONResponse struct {
	Config VPNConfig `json:"config"`

	// FreeSlots Number of free VPN slots after creation
	FreeSlots *int                `json:"free_slots,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`

	// Type VPN type
	Type ConfigType `json:"type"`
}

func (response PostConfigs201JSONResponse) VisitPostConfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostConfigs412Response struct {
}

func (response PostConfigs412Response) VisitPostConfigsResponse(w http.ResponseWriter) error {
	w.WriteHeader(412)
	return nil
}

type PostConfigsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostConfigsdefaultJSONResponse) VisitPostConfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetConfigsSlotsRequestObject struct {
}

type GetConfigsSlotsResponseObject interface {
	VisitGetConfigsSlotsResponse(w http.ResponseWriter) error
}

type GetConfigsSlots200JSONResponse SlotsInfo

func (response GetConfigsSlots200JSONResponse) VisitGetConfigsSlotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigsSlotsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetConfigsSlotsdefaultJSONResponse) VisitGetConfigsSlotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create new VPN config
	// (POST /configs)
	PostConfigs(ctx context.Context, request PostConfigsRequestObject) (PostConfigsResponseObject, error)
	// Get free VPN slots
	// (GET /configs/slots)
	GetConfigsSlots(ctx context.Context, request GetConfigsSlotsRequestObject) (GetConfigsSlotsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostConfigs operation middleware
func (sh *strictHandler) PostConfigs(ctx echo.Context) error {
	var request PostConfigsRequestObject

	var body PostConfigsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConfigs(ctx.Request().Context(), request.(PostConfigsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConfigs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostConfigsResponseObject); ok {
		return validResponse.VisitPostConfigsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetConfigsSlots operation middleware
func (sh *strictHandler) GetConfigsSlots(ctx echo.Context) error {
	var request GetConfigsSlotsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfigsSlots(ctx.Request().Context(), request.(GetConfigsSlotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfigsSlots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetConfigsSlotsResponseObject); ok {
		return validResponse.VisitGetConfigsSlotsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
