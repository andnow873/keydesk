// Package shuffler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package shuffler

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ConfigType.
const (
	Ipsec   ConfigType = "ipsec"
	Outline ConfigType = "outline"
	Ovc     ConfigType = "ovc"
	Wg      ConfigType = "wg"
)

// AmneziaOVCConfig defines model for AmneziaOVCConfig.
type AmneziaOVCConfig struct {
	FileContent string `json:"file_content"`
	FileName    string `json:"file_name"`
	TunnelName  string `json:"tunnel_name"`
}

// ConfigType VPN type
type ConfigType string

// Error defines model for Error.
type Error = string

// IPSecL2TPConfig defines model for IPSecL2TPConfig.
type IPSecL2TPConfig struct {
	Password string `json:"password"`
	Psk      string `json:"psk"`
	Server   string `json:"server"`
	Username string `json:"username"`
}

// OutlineConfig defines model for OutlineConfig.
type OutlineConfig struct {
	AccessKey string `json:"access_key"`
}

// SlotsInfo defines model for SlotsInfo.
type SlotsInfo struct {
	FreeSlots  int `json:"free_slots"`
	TotalSlots int `json:"total_slots"`
}

// VPNConfig defines model for VPNConfig.
type VPNConfig struct {
	union json.RawMessage
}

// WireGuardConfig defines model for WireGuardConfig.
type WireGuardConfig struct {
	FileContent string `json:"file_content"`
	FileName    string `json:"file_name"`
	TunnelName  string `json:"tunnel_name"`
}

// PostConfigsJSONBody defines parameters for PostConfigs.
type PostConfigsJSONBody struct {
	// Domain Domain for connection, if omitted default domain is domain of keydesk
	Domain *string `json:"domain,omitempty"`

	// Type VPN type
	Type ConfigType `json:"type"`
}

// PostConfigsJSONRequestBody defines body for PostConfigs for application/json ContentType.
type PostConfigsJSONRequestBody PostConfigsJSONBody

// AsOutlineConfig returns the union data inside the VPNConfig as a OutlineConfig
func (t VPNConfig) AsOutlineConfig() (OutlineConfig, error) {
	var body OutlineConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutlineConfig overwrites any union data inside the VPNConfig as the provided OutlineConfig
func (t *VPNConfig) FromOutlineConfig(v OutlineConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutlineConfig performs a merge with any union data inside the VPNConfig, using the provided OutlineConfig
func (t *VPNConfig) MergeOutlineConfig(v OutlineConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmneziaOVCConfig returns the union data inside the VPNConfig as a AmneziaOVCConfig
func (t VPNConfig) AsAmneziaOVCConfig() (AmneziaOVCConfig, error) {
	var body AmneziaOVCConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmneziaOVCConfig overwrites any union data inside the VPNConfig as the provided AmneziaOVCConfig
func (t *VPNConfig) FromAmneziaOVCConfig(v AmneziaOVCConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmneziaOVCConfig performs a merge with any union data inside the VPNConfig, using the provided AmneziaOVCConfig
func (t *VPNConfig) MergeAmneziaOVCConfig(v AmneziaOVCConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWireGuardConfig returns the union data inside the VPNConfig as a WireGuardConfig
func (t VPNConfig) AsWireGuardConfig() (WireGuardConfig, error) {
	var body WireGuardConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWireGuardConfig overwrites any union data inside the VPNConfig as the provided WireGuardConfig
func (t *VPNConfig) FromWireGuardConfig(v WireGuardConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWireGuardConfig performs a merge with any union data inside the VPNConfig, using the provided WireGuardConfig
func (t *VPNConfig) MergeWireGuardConfig(v WireGuardConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPSecL2TPConfig returns the union data inside the VPNConfig as a IPSecL2TPConfig
func (t VPNConfig) AsIPSecL2TPConfig() (IPSecL2TPConfig, error) {
	var body IPSecL2TPConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPSecL2TPConfig overwrites any union data inside the VPNConfig as the provided IPSecL2TPConfig
func (t *VPNConfig) FromIPSecL2TPConfig(v IPSecL2TPConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPSecL2TPConfig performs a merge with any union data inside the VPNConfig, using the provided IPSecL2TPConfig
func (t *VPNConfig) MergeIPSecL2TPConfig(v IPSecL2TPConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPNConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPNConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
