// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MarkMessageAsReadHandlerFunc turns a function with the right signature into a mark message as read handler
type MarkMessageAsReadHandlerFunc func(MarkMessageAsReadParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn MarkMessageAsReadHandlerFunc) Handle(params MarkMessageAsReadParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// MarkMessageAsReadHandler interface for that can handle valid mark message as read params
type MarkMessageAsReadHandler interface {
	Handle(MarkMessageAsReadParams, interface{}) middleware.Responder
}

// NewMarkMessageAsRead creates a new http.Handler for the mark message as read operation
func NewMarkMessageAsRead(ctx *middleware.Context, handler MarkMessageAsReadHandler) *MarkMessageAsRead {
	return &MarkMessageAsRead{Context: ctx, Handler: handler}
}

/*
	MarkMessageAsRead swagger:route POST /messages/{id}/read markMessageAsRead

# Mark message as read

Mark message as read
*/
type MarkMessageAsRead struct {
	Context *middleware.Context
	Handler MarkMessageAsReadHandler
}

func (o *MarkMessageAsRead) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMarkMessageAsReadParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
