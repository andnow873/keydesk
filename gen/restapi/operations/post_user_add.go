// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUserAddHandlerFunc turns a function with the right signature into a post user add handler
type PostUserAddHandlerFunc func(PostUserAddParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserAddHandlerFunc) Handle(params PostUserAddParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostUserAddHandler interface for that can handle valid post user add params
type PostUserAddHandler interface {
	Handle(PostUserAddParams, interface{}) middleware.Responder
}

// NewPostUserAdd creates a new http.Handler for the post user add operation
func NewPostUserAdd(ctx *middleware.Context, handler PostUserAddHandler) *PostUserAdd {
	return &PostUserAdd{Context: ctx, Handler: handler}
}

/* PostUserAdd swagger:route POST /user/add postUserAdd

PostUserAdd post user add API

*/
type PostUserAdd struct {
	Context *middleware.Context
	Handler PostUserAddHandler
}

func (o *PostUserAdd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUserAddParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
