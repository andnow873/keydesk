// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"test/gen/models"
)

// PostUserAddCreatedCode is the HTTP code returned for type PostUserAddCreated
const PostUserAddCreatedCode int = 201

/*PostUserAddCreated New user created.

swagger:response postUserAddCreated
*/
type PostUserAddCreated struct {
	/*the value is `attachment; filename="wg.conf"`

	 */
	ContentDisposition string `json:"Content-Disposition"`

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewPostUserAddCreated creates PostUserAddCreated with default headers values
func NewPostUserAddCreated() *PostUserAddCreated {

	return &PostUserAddCreated{}
}

// WithContentDisposition adds the contentDisposition to the post user add created response
func (o *PostUserAddCreated) WithContentDisposition(contentDisposition string) *PostUserAddCreated {
	o.ContentDisposition = contentDisposition
	return o
}

// SetContentDisposition sets the contentDisposition to the post user add created response
func (o *PostUserAddCreated) SetContentDisposition(contentDisposition string) {
	o.ContentDisposition = contentDisposition
}

// WithPayload adds the payload to the post user add created response
func (o *PostUserAddCreated) WithPayload(payload io.ReadCloser) *PostUserAddCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user add created response
func (o *PostUserAddCreated) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserAddCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Disposition

	contentDisposition := o.ContentDisposition
	if contentDisposition != "" {
		rw.Header().Set("Content-Disposition", contentDisposition)
	}

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostUserAddForbiddenCode is the HTTP code returned for type PostUserAddForbidden
const PostUserAddForbiddenCode int = 403

/*PostUserAddForbidden You do not have necessary permissions for the resource

swagger:response postUserAddForbidden
*/
type PostUserAddForbidden struct {
}

// NewPostUserAddForbidden creates PostUserAddForbidden with default headers values
func NewPostUserAddForbidden() *PostUserAddForbidden {

	return &PostUserAddForbidden{}
}

// WriteResponse to the client
func (o *PostUserAddForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

/*PostUserAddDefault error

swagger:response postUserAddDefault
*/
type PostUserAddDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserAddDefault creates PostUserAddDefault with default headers values
func NewPostUserAddDefault(code int) *PostUserAddDefault {
	if code <= 0 {
		code = 500
	}

	return &PostUserAddDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post user add default response
func (o *PostUserAddDefault) WithStatusCode(code int) *PostUserAddDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post user add default response
func (o *PostUserAddDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post user add default response
func (o *PostUserAddDefault) WithPayload(payload *models.Error) *PostUserAddDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user add default response
func (o *PostUserAddDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserAddDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
