// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vpngen/keydesk/gen/models"
)

// PostUserngCreatedCode is the HTTP code returned for type PostUserngCreated
const PostUserngCreatedCode int = 201

/*
PostUserngCreated New user created.

swagger:response postUserngCreated
*/
type PostUserngCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Newuser `json:"body,omitempty"`
}

// NewPostUserngCreated creates PostUserngCreated with default headers values
func NewPostUserngCreated() *PostUserngCreated {

	return &PostUserngCreated{}
}

// WithPayload adds the payload to the post userng created response
func (o *PostUserngCreated) WithPayload(payload *models.Newuser) *PostUserngCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post userng created response
func (o *PostUserngCreated) SetPayload(payload *models.Newuser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserngCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserngForbiddenCode is the HTTP code returned for type PostUserngForbidden
const PostUserngForbiddenCode int = 403

/*
PostUserngForbidden You do not have necessary permissions for the resource

swagger:response postUserngForbidden
*/
type PostUserngForbidden struct {
}

// NewPostUserngForbidden creates PostUserngForbidden with default headers values
func NewPostUserngForbidden() *PostUserngForbidden {

	return &PostUserngForbidden{}
}

// WriteResponse to the client
func (o *PostUserngForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PostUserngInternalServerErrorCode is the HTTP code returned for type PostUserngInternalServerError
const PostUserngInternalServerErrorCode int = 500

/*
PostUserngInternalServerError Internal server error

swagger:response postUserngInternalServerError
*/
type PostUserngInternalServerError struct {
}

// NewPostUserngInternalServerError creates PostUserngInternalServerError with default headers values
func NewPostUserngInternalServerError() *PostUserngInternalServerError {

	return &PostUserngInternalServerError{}
}

// WriteResponse to the client
func (o *PostUserngInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}

/*
PostUserngDefault error

swagger:response postUserngDefault
*/
type PostUserngDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserngDefault creates PostUserngDefault with default headers values
func NewPostUserngDefault(code int) *PostUserngDefault {
	if code <= 0 {
		code = 500
	}

	return &PostUserngDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post userng default response
func (o *PostUserngDefault) WithStatusCode(code int) *PostUserngDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post userng default response
func (o *PostUserngDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post userng default response
func (o *PostUserngDefault) WithPayload(payload *models.Error) *PostUserngDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post userng default response
func (o *PostUserngDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserngDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
